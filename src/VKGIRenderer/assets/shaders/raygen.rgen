#version 460
#pragma shader_stage(raygen)

#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_buffer_reference_uvec2 : require
#extension GL_EXT_scalar_block_layout : require

#include "pt_common.glsl"


layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba32f) uniform image2D image;
layout(binding = 2, std140, set = 0) uniform _RenderState {
	RenderState renderState;
};

layout(location = 0) rayPayloadEXT HitPayload prd;

vec3 rayDir(vec2 size, vec2 fragCoord, float fov) {
    vec2 xy = fragCoord - size / 2.0f;
    float z = (max(size.x,size.y)/2.0f) / tan(fov / 2.0f);
    vec3 dir = normalize(vec3(-xy.x, xy.y, z));
    return dir;
}

void main() 
{
	vec4 origin = renderState.camera.eye;
	vec4 direction = vec4(rayDir(vec2(gl_LaunchSizeEXT.xy), vec2(gl_LaunchIDEXT.xy), renderState.camera.fov), 0.0);
	direction = renderState.camera.view * direction;
	direction.y *= -1;

	uint seed = pcgHash(tea(gl_LaunchSizeEXT.x *gl_LaunchIDEXT.y + gl_LaunchIDEXT.x, renderState.params.timestamp));
    //const float2 subpixel_jitter = make_float2(randUniform(sampler), randUniform(sampler));
	vec3 result = vec3(0.0);
	for (int i = 0; i < 1; i++) {
        prd.weight = vec3(1.0);
        prd.directWeight = 1.0f;
        prd.countEmitted = 1;
        prd.wasDelta = 0;
        prd.done = 0;
        prd.seed = seed;
		prd.origin = origin.xyz;
        prd.direction = direction.xyz;
    
        int depth = 0;
        while (true)
        {
			prd.emitted = vec3(0.0);
			uint rayFlags = gl_RayFlagsOpaqueEXT;
			uint cullMask = 0xff;
			float tmin = 0.01;
			float tmax = 10000.0;

			traceRayEXT(topLevelAS, rayFlags, cullMask, 0, 0, 0, prd.origin, tmin, prd.direction, tmax, 0);

        
            result += prd.emitted;
            
            // russian rullete
            if (depth > 3) {
                float q = clamp(max(max(prd.weight.x, prd.weight.y), prd.weight.z), 0.05, 1.0);
                if (randUniform(prd.seed) > q || q != 0.0f)
                    break;
                prd.weight /= q;
            }

            if (prd.done == 1)
                break;

            ++depth;
        }
    }

	vec3 accumColor = result.xyz / float(1);

    if (renderState.params.timestamp > 0)
    {
        const float                 a = 1.0f / float(renderState.params.timestamp  + 1);
		vec3 prevColor = imageLoad(image, ivec2(gl_LaunchIDEXT.xy)).xyz;
        accumColor = mix(prevColor, accumColor, a);
    }
    // if (!isfinite(accum_color)) {
    //     params.accumBuffer[image_index] = make_float4(accum_color, 1.0f);
    //     params.frameBuffer[image_index] = make_color(make_float3(0.f, 0.0, 10.0));
    //     printf("nan detected in framebuffer\n");
    // }
    // else {
        // params.accumBuffer[image_index] = make_float4(accum_color, 1.0f);
        // if (params.toneMap) {
        //     params.frameBuffer[image_index] = make_color(filmMap(accum_color));
        // }
        // else {
        //     params.frameBuffer[image_index] = make_color(gammaCorrect(accum_color));
        // }
    // }
    if (!any(isnan(accumColor))) {
        imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(accumColor, 1.0f));
    }
}